Questioin: окей, напиши плиз алгоритм откуда все идет и где заканчивает. Спасибо заранее

- привет.
- тока вернулся.
- напиши еще раз - в чем вопрос  был.
- ну по загрузке компонент все стандартно (расскажу в конце).

0) при загрузке страницы useEffect - гружу очистку стэйта list - посути очищает основной обьект хранения даднных в редаксе для загрузки заглушки картинки (для отображения компонент что ниже кнопок input )
1) затем загружаются файлы в input
основная операци - onChange
в функции:
а) проверяю что файлов не более 10, ограничение просто так - можно и безнего.
б) очищаю стэйт (делаетс для того что если ты загрузил файлы, потом опять загрузил второй раз файлы они не добавлялись к добавленному, а каждый рз добавлялись бы к обькту-пустышке )
в) преобразую обьект загруженных файлов в масив, разбираю через его forEach что бы каждый из элементов массива - это файл, прочитать
отправляю каждй элемент в функцию getBase64

2) Там в getBase64 происходит чтение файла - это асинхронная операция, оэтому промис. Прочитывает файл и сохрает его в стринг формат c кодировкой base64.
а) вначале создаеся reader = new FileReader(), это пустой обьект файла в который будет записан файл
после чтения через -
б) reader.onload = () => {
в) полученый в этот момент обьект загрузится в редакс через dispatch(addList(obj))

- продолжение следует...

- дальше у нас редакс наполнется, картинки строятся
лист рендрится

3) следующее это у нас onClick
- функция асинхронная потому что в ней есть промис - это таймер, мне надо что бы каждая итерация цикла длилась 24-26 секунд. Из-за ограничения шаттера на 5 запросов в минуту. Каждый пакет кейвордов для одной картинки строится на 2 запросах.
Т.е. задержка вставлена изза огранияения, если использование api купить, то ограничение снимем.

и так что там внутри...
запустили, заявили что есть таймер, запустили цикл

в цикле что:
из редакса, читаю массив который содержит все, открываю элемент массива - обьект (файл), в нем читаю дата - это стринг в формате base64 отрезаю от него системную информацию которая ненужна это 23 первых символа, и это тоже будет картинка в итоге - итак полученое стринг.
дальше для картинки которая отправляется обновляю состояние в редаксе - на 'Fetching the keywords' - что бы юзер видел какая картинка получает кейворды.

потом отправляю аксиос-пост  на наш nodejs сервер для последующей отправки на шаттер, на сервере тоже пост принимает и пере-отправляет на искуственный интелект. потом получает ключевики и возвращает их в ответе в клиент.

в редаксе обновляем состоние обьекта - ключевики добавляя в них полученое.
и так цикл прокручивает весь массив проходя поочереди по каждому файлу.

5) - все ошибки я постарался вывести в сообщения т.е. по отображаемой информации в полях для кейворда можно понять что делается на сервере и если что отловить ошибку. иначе линт ругается на консоль.лог.

при добавлении числа файлов более 10 выдается сообщение - это тоже сделал вместо алерта иначе линт ругался

6) редакс - хранение, в редаксе у меня 2 стэйта
это массив со всеми файлами которые хранятся в виде обьектов. каждый обьект содержит data - кодированный стринг картинки,  name - file.name, size: file.size,  type: jpg, jpeg, png, и собственно текст что делается либо ключевики  - в word:

так же есть стэйт message - это сообщение алерта, которое может быть none и не отображаться либо текстом и вылазить на передний план. по нажанию на который тот становится опять none и исчезает

7) - весь сайт разделен на 3 компоненты
home - посути боди всего
imgkeywords - отображение картинок и ключевиков
и
fileuploads - кнопки input и вся операции по подготовке файлов и получению кючевиков

8) сервер - пересылка аксиоса на внешний ресурс и плучение ответа.

- это кажется все.

9) - разработка заняла около 3-4 недель с 0 с абсолютного непонимания в начале и до вот такой статьи в конце
- в процессе я делал сохранение файлов на сервер через 'fs' удаление файлов с сервера, были запросы get, post, post добавления, и delete
но потом мы прошли редакс и я все это выкинул за ненадобностью, но кода улетело очень много, жалко. )))
- очень сильно по сохранению картинок на серваке прокачался что бы потом их читать в клиенте.
- хотя редакс все упростил значительно.
- первые версии приложения были для одного файла, в итоге делал для 5 потом увеличил в 10. апгрейд из  sigle-upload до multyupload занял неделю
- оптимизация ошибок лехи и редакса еще неделю.
- делал по ночам пока ребенок спит )
